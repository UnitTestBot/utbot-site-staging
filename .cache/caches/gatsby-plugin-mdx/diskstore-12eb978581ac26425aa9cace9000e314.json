{"expireTime":9007200921684874000,"key":"gatsby-plugin-mdx-entire-payload-3de78de340c8613165fd05501313ecc0-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/home/runner/work/utbot-site-staging/utbot-site-staging/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":134,"offset":135},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":137},"end":{"line":5,"column":29,"offset":165},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Stubs","position":{"start":{"line":8,"column":3,"offset":170},"end":{"line":8,"column":8,"offset":175},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":168},"end":{"line":8,"column":8,"offset":175},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here we describe how stubs are generated and what they are needed for.","position":{"start":{"line":10,"column":1,"offset":177},"end":{"line":10,"column":71,"offset":247},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":177},"end":{"line":10,"column":71,"offset":247},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"üìù","position":{"start":{"line":12,"column":3,"offset":251},"end":{"line":12,"column":5,"offset":253},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Note","position":{"start":{"line":12,"column":7,"offset":255},"end":{"line":12,"column":11,"offset":259},"indent":[]}}],"position":{"start":{"line":12,"column":5,"offset":253},"end":{"line":12,"column":13,"offset":261},"indent":[]}}],"position":{"start":{"line":12,"column":3,"offset":251},"end":{"line":12,"column":13,"offset":261},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Stub","position":{"start":{"line":14,"column":5,"offset":268},"end":{"line":14,"column":9,"offset":272},"indent":[]}}],"position":{"start":{"line":14,"column":3,"offset":266},"end":{"line":14,"column":11,"offset":274},"indent":[]}},{"type":"text","value":" is a function which emulates behavior of another function it is written for.\nIt's often useful to write stubs for functions from another module that you don't want to test.","position":{"start":{"line":14,"column":11,"offset":274},"end":{"line":15,"column":98,"offset":449},"indent":[3]}}],"position":{"start":{"line":14,"column":3,"offset":266},"end":{"line":15,"column":98,"offset":449},"indent":[3]}}],"position":{"start":{"line":12,"column":1,"offset":249},"end":{"line":15,"column":98,"offset":449},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"When stubs are used","position":{"start":{"line":17,"column":5,"offset":455},"end":{"line":17,"column":24,"offset":474},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":451},"end":{"line":17,"column":24,"offset":474},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"UTBot generates stubs for every function in the project first time you open it and synchronize each time before test\ngeneration.","position":{"start":{"line":19,"column":1,"offset":476},"end":{"line":20,"column":12,"offset":604},"indent":[1]}}],"position":{"start":{"line":19,"column":1,"offset":476},"end":{"line":20,"column":12,"offset":604},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"First time you open the project you will see ","position":{"start":{"line":22,"column":1,"offset":606},"end":{"line":22,"column":46,"offset":651},"indent":[]}},{"type":"inlineCode","value":"UTBot is generating stubs for project...","position":{"start":{"line":22,"column":46,"offset":651},"end":{"line":22,"column":88,"offset":693},"indent":[]}},{"type":"text","value":" message. It means that for each\nfile in your project UTBot generates file which contains all non-static functions signatures from the source file. Stubs\ncan be used as substitutes for calling functions from another module. Consider the following project structure:","position":{"start":{"line":22,"column":88,"offset":693},"end":{"line":24,"column":112,"offset":958},"indent":[1,1]}}],"position":{"start":{"line":22,"column":1,"offset":606},"end":{"line":24,"column":112,"offset":958},"indent":[1,1]}},{"type":"code","lang":null,"meta":null,"value":"executable\n|---- lib1.a\n|     |---- A.c\n|     +---- B.c\n|---- lib2.a\n|     |---- C.c","position":{"start":{"line":26,"column":1,"offset":960},"end":{"line":33,"column":4,"offset":1052},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If we run test generation for ","position":{"start":{"line":35,"column":1,"offset":1054},"end":{"line":35,"column":31,"offset":1084},"indent":[]}},{"type":"inlineCode","value":"C.c","position":{"start":{"line":35,"column":31,"offset":1084},"end":{"line":35,"column":36,"offset":1089},"indent":[]}},{"type":"text","value":", all functions from ","position":{"start":{"line":35,"column":36,"offset":1089},"end":{"line":35,"column":57,"offset":1110},"indent":[]}},{"type":"inlineCode","value":"lib1.a","position":{"start":{"line":35,"column":57,"offset":1110},"end":{"line":35,"column":65,"offset":1118},"indent":[]}},{"type":"text","value":" will be replaced with their stubs on build step. So, if\nthe function ","position":{"start":{"line":35,"column":65,"offset":1118},"end":{"line":36,"column":14,"offset":1188},"indent":[1]}},{"type":"inlineCode","value":"foo","position":{"start":{"line":36,"column":14,"offset":1188},"end":{"line":36,"column":19,"offset":1193},"indent":[]}},{"type":"text","value":" from ","position":{"start":{"line":36,"column":19,"offset":1193},"end":{"line":36,"column":25,"offset":1199},"indent":[]}},{"type":"inlineCode","value":"C.c","position":{"start":{"line":36,"column":25,"offset":1199},"end":{"line":36,"column":30,"offset":1204},"indent":[]}},{"type":"text","value":" calls the function ","position":{"start":{"line":36,"column":30,"offset":1204},"end":{"line":36,"column":50,"offset":1224},"indent":[]}},{"type":"inlineCode","value":"bar","position":{"start":{"line":36,"column":50,"offset":1224},"end":{"line":36,"column":55,"offset":1229},"indent":[]}},{"type":"text","value":" from ","position":{"start":{"line":36,"column":55,"offset":1229},"end":{"line":36,"column":61,"offset":1235},"indent":[]}},{"type":"inlineCode","value":"A.c","position":{"start":{"line":36,"column":61,"offset":1235},"end":{"line":36,"column":66,"offset":1240},"indent":[]}},{"type":"text","value":", then stub for the function ","position":{"start":{"line":36,"column":66,"offset":1240},"end":{"line":36,"column":95,"offset":1269},"indent":[]}},{"type":"inlineCode","value":"bar","position":{"start":{"line":36,"column":95,"offset":1269},"end":{"line":36,"column":100,"offset":1274},"indent":[]}},{"type":"text","value":" will be invoked\ninstead. Note that you can still generate tests using the exact definition of ","position":{"start":{"line":36,"column":100,"offset":1274},"end":{"line":37,"column":79,"offset":1369},"indent":[1]}},{"type":"inlineCode","value":"bar","position":{"start":{"line":37,"column":79,"offset":1369},"end":{"line":37,"column":84,"offset":1374},"indent":[]}},{"type":"text","value":"; for that, you will need to\nunmark ","position":{"start":{"line":37,"column":84,"offset":1374},"end":{"line":38,"column":8,"offset":1410},"indent":[1]}},{"type":"inlineCode","value":"Use Stubs","position":{"start":{"line":38,"column":8,"offset":1410},"end":{"line":38,"column":19,"offset":1421},"indent":[]}},{"type":"text","value":" checkbox in ","position":{"start":{"line":38,"column":19,"offset":1421},"end":{"line":38,"column":32,"offset":1434},"indent":[]}},{"type":"link","title":null,"url":"vscode-extension-settings#use-stubs","children":[{"type":"text","value":"settings","position":{"start":{"line":38,"column":33,"offset":1435},"end":{"line":38,"column":41,"offset":1443},"indent":[]}}],"position":{"start":{"line":38,"column":32,"offset":1434},"end":{"line":38,"column":79,"offset":1481},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":38,"column":79,"offset":1481},"end":{"line":38,"column":80,"offset":1482},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":1054},"end":{"line":38,"column":80,"offset":1482},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Stub file example","position":{"start":{"line":40,"column":5,"offset":1488},"end":{"line":40,"column":22,"offset":1505},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":1484},"end":{"line":40,"column":22,"offset":1505},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Stub files can be found in ","position":{"start":{"line":42,"column":1,"offset":1507},"end":{"line":42,"column":28,"offset":1534},"indent":[]}},{"type":"inlineCode","value":"tests/stubs","position":{"start":{"line":42,"column":28,"offset":1534},"end":{"line":42,"column":41,"offset":1547},"indent":[]}},{"type":"text","value":" folder. This is an example of stub file generated\nfor ","position":{"start":{"line":42,"column":41,"offset":1547},"end":{"line":43,"column":5,"offset":1602},"indent":[1]}},{"type":"inlineCode","value":"c-example/lib/dependent_functions.c","position":{"start":{"line":43,"column":5,"offset":1602},"end":{"line":43,"column":42,"offset":1639},"indent":[]}},{"type":"text","value":" from\nthe ","position":{"start":{"line":43,"column":42,"offset":1639},"end":{"line":44,"column":5,"offset":1649},"indent":[1]}},{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example","children":[{"type":"text","value":"example project","position":{"start":{"line":44,"column":6,"offset":1650},"end":{"line":44,"column":21,"offset":1665},"indent":[]}}],"position":{"start":{"line":44,"column":5,"offset":1649},"end":{"line":44,"column":101,"offset":1745},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":44,"column":101,"offset":1745},"end":{"line":44,"column":102,"offset":1746},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":1507},"end":{"line":44,"column":102,"offset":1746},"indent":[1,1]}},{"type":"code","lang":"cpp","meta":null,"value":"// 1624618650000000000\n// Please, do not change the line above\n\n#ifdef\nKLEE_MODE\nextern void klee_make_symbolic(void *addr, unsigned long long nbytes, const char *name);\n#endif\n#include\n\"dependent_functions_stub.h\"\n\n#define\nNULL ((void*)0)\n\nint double_max_symbolic;\nint double_max(int a, int b) {\nstatic int firstTimeCall = 1;\n#ifdef\nKLEE_MODE\nif (firstTimeCall == 1) {\nfirstTimeCall = 0;\nklee_make_symbolic(&double_max_symbolic, sizeof(double_max_symbolic), \"double_max_symbolic\");\n}\n#endif\nreturn double_max_symbolic;\n}\n","position":{"start":{"line":46,"column":1,"offset":1748},"end":{"line":73,"column":4,"offset":2281},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The first line contains timestamp of stub file creation. It is required for synchronization with the source code, so,\nplease, do not modify this line:","position":{"start":{"line":75,"column":1,"offset":2283},"end":{"line":76,"column":33,"offset":2433},"indent":[1]}}],"position":{"start":{"line":75,"column":1,"offset":2283},"end":{"line":76,"column":33,"offset":2433},"indent":[1]}},{"type":"code","lang":"cpp","meta":null,"value":"// 1619438023000000000","position":{"start":{"line":78,"column":1,"offset":2435},"end":{"line":80,"column":4,"offset":2468},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Then, if a ","position":{"start":{"line":82,"column":1,"offset":2470},"end":{"line":82,"column":12,"offset":2481},"indent":[]}},{"type":"inlineCode","value":"KLEE_MODE","position":{"start":{"line":82,"column":12,"offset":2481},"end":{"line":82,"column":23,"offset":2492},"indent":[]}},{"type":"text","value":" macro is passed during preprocessing, we add a KLEE declaration to allow us to use symbolic\nreturn value. ","position":{"start":{"line":82,"column":23,"offset":2492},"end":{"line":83,"column":15,"offset":2599},"indent":[1]}},{"type":"inlineCode","value":"KLEE_MODE","position":{"start":{"line":83,"column":15,"offset":2599},"end":{"line":83,"column":26,"offset":2610},"indent":[]}},{"type":"text","value":" serves for both test generation and test running purposes.","position":{"start":{"line":83,"column":26,"offset":2610},"end":{"line":83,"column":85,"offset":2669},"indent":[]}}],"position":{"start":{"line":82,"column":1,"offset":2470},"end":{"line":83,"column":85,"offset":2669},"indent":[1]}},{"type":"code","lang":"cpp","meta":null,"value":"#ifdef KLEE_MODE\nextern void klee_make_symbolic(void *addr, unsigned long long nbytes, const char *name);\n#endif","position":{"start":{"line":85,"column":1,"offset":2671},"end":{"line":89,"column":4,"offset":2794},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This variable stores return value of the stub function:","position":{"start":{"line":91,"column":1,"offset":2796},"end":{"line":91,"column":56,"offset":2851},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":2796},"end":{"line":91,"column":56,"offset":2851},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"int double_max_symbolic;","position":{"start":{"line":93,"column":1,"offset":2853},"end":{"line":95,"column":4,"offset":2888},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Stub function signature is always the same as the signature of the source function. If it's not (for example, if the\nfunction was modified), then UTBot will synchronize them by rewriting stub function with the new one:","position":{"start":{"line":97,"column":1,"offset":2890},"end":{"line":98,"column":102,"offset":3108},"indent":[1]}}],"position":{"start":{"line":97,"column":1,"offset":2890},"end":{"line":98,"column":102,"offset":3108},"indent":[1]}},{"type":"code","lang":"cpp","meta":null,"value":"int double_max(int a, int b)","position":{"start":{"line":100,"column":1,"offset":3110},"end":{"line":102,"column":4,"offset":3149},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If UTBot uses stubs, then ","position":{"start":{"line":104,"column":1,"offset":3151},"end":{"line":104,"column":27,"offset":3177},"indent":[]}},{"type":"inlineCode","value":"KLEE_MODE","position":{"start":{"line":104,"column":27,"offset":3177},"end":{"line":104,"column":38,"offset":3188},"indent":[]}},{"type":"text","value":" is defined, and the return value is made symbolic. This way KLEE can decide what\nvalues to return to satisfy the execution paths:","position":{"start":{"line":104,"column":38,"offset":3188},"end":{"line":105,"column":49,"offset":3318},"indent":[1]}}],"position":{"start":{"line":104,"column":1,"offset":3151},"end":{"line":105,"column":49,"offset":3318},"indent":[1]}},{"type":"code","lang":"cpp","meta":null,"value":"static int firstTimeCall = 1;\n#ifdef KLEE_MODE\n    if (firstTimeCall == 1) {\n        firstTimeCall = 0;\n        klee_make_symbolic(&double_max_symbolic, sizeof(double_max_symbolic), \"double_max_symbolic\");\n    }\n#endif","position":{"start":{"line":107,"column":1,"offset":3320},"end":{"line":115,"column":4,"offset":3549},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Stub headers","position":{"start":{"line":117,"column":5,"offset":3555},"end":{"line":117,"column":17,"offset":3567},"indent":[]}}],"position":{"start":{"line":117,"column":1,"offset":3551},"end":{"line":117,"column":17,"offset":3567},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For each stub, a header is generated. It contains definitions of types and structures used in function headers, allowing\nstubs to be compilable. Stub headers may contain definitions fetched from system headers and may look obscure, but\nusually you will not modify them.","position":{"start":{"line":119,"column":1,"offset":3569},"end":{"line":121,"column":34,"offset":3838},"indent":[1,1]}}],"position":{"start":{"line":119,"column":1,"offset":3569},"end":{"line":121,"column":34,"offset":3838},"indent":[1,1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"üìù","position":{"start":{"line":123,"column":3,"offset":3842},"end":{"line":123,"column":5,"offset":3844},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Note","position":{"start":{"line":123,"column":7,"offset":3846},"end":{"line":123,"column":11,"offset":3850},"indent":[]}}],"position":{"start":{"line":123,"column":5,"offset":3844},"end":{"line":123,"column":13,"offset":3852},"indent":[]}}],"position":{"start":{"line":123,"column":3,"offset":3842},"end":{"line":123,"column":13,"offset":3852},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can change the stub function body however you want. UTBot saves custom code inside the function while synchronizing. However, if the source function signature changes, then stub function will be completely rewritten.","position":{"start":{"line":125,"column":3,"offset":3857},"end":{"line":125,"column":223,"offset":4077},"indent":[]}}],"position":{"start":{"line":125,"column":3,"offset":3857},"end":{"line":125,"column":223,"offset":4077},"indent":[]}}],"position":{"start":{"line":123,"column":1,"offset":3840},"end":{"line":125,"column":223,"offset":4077},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Tests with stubs","position":{"start":{"line":127,"column":5,"offset":4083},"end":{"line":127,"column":21,"offset":4099},"indent":[]}}],"position":{"start":{"line":127,"column":1,"offset":4079},"end":{"line":127,"column":21,"offset":4099},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For the tests that use stubs, the return values are generated in a such way that the code coverage is maximized. For\nexample:","position":{"start":{"line":129,"column":1,"offset":4101},"end":{"line":130,"column":9,"offset":4226},"indent":[1]}}],"position":{"start":{"line":129,"column":1,"offset":4101},"end":{"line":130,"column":9,"offset":4226},"indent":[1]}},{"type":"code","lang":"cpp","meta":null,"value":"extern \"C\" char pointerToPointer_symbolic;\n\nTEST(regression, calc_two_numbers_f_test_1)\n{\n    // Initialize symbolic stubs\n    pointerToPointer_symbolic = '\\x10';\n\n    // Construct input\n    char a = 'c';\n    char b = 'p';\n\n    // Expected output\n    int expected = 2;\n\n    // Trigger the function\n    int actual = calc_two_numbers_f(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, calc_two_numbers_f_test_2)\n{\n    // Initialize symbolic stubs\n    pointerToPointer_symbolic = 'b';\n\n    // Construct input\n    char a = 'c';\n    char b = 'b';\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = calc_two_numbers_f(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}","position":{"start":{"line":132,"column":1,"offset":4228},"end":{"line":172,"column":4,"offset":4988},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Here ","position":{"start":{"line":174,"column":1,"offset":4990},"end":{"line":174,"column":6,"offset":4995},"indent":[]}},{"type":"inlineCode","value":"pointerToPointer_symbolic","position":{"start":{"line":174,"column":6,"offset":4995},"end":{"line":174,"column":33,"offset":5022},"indent":[]}},{"type":"text","value":" stores return value for ","position":{"start":{"line":174,"column":33,"offset":5022},"end":{"line":174,"column":58,"offset":5047},"indent":[]}},{"type":"inlineCode","value":"pointerToPointer","position":{"start":{"line":174,"column":58,"offset":5047},"end":{"line":174,"column":76,"offset":5065},"indent":[]}},{"type":"text","value":" stub function.","position":{"start":{"line":174,"column":76,"offset":5065},"end":{"line":174,"column":91,"offset":5080},"indent":[]}}],"position":{"start":{"line":174,"column":1,"offset":4990},"end":{"line":174,"column":91,"offset":5080},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Modifying stubs","position":{"start":{"line":176,"column":5,"offset":5086},"end":{"line":176,"column":20,"offset":5101},"indent":[]}}],"position":{"start":{"line":176,"column":1,"offset":5082},"end":{"line":176,"column":20,"offset":5101},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As it was noted, it is easy to rewrite UTBot stubs into anything you want them to be. You should modify only function\nbodies and not touch header include, or ","position":{"start":{"line":178,"column":1,"offset":5103},"end":{"line":179,"column":41,"offset":5261},"indent":[1]}},{"type":"inlineCode","value":"KLEE_MODE","position":{"start":{"line":179,"column":41,"offset":5261},"end":{"line":179,"column":52,"offset":5272},"indent":[]}},{"type":"text","value":" ifdefs. Consider the simplest example:","position":{"start":{"line":179,"column":52,"offset":5272},"end":{"line":179,"column":91,"offset":5311},"indent":[]}}],"position":{"start":{"line":178,"column":1,"offset":5103},"end":{"line":179,"column":91,"offset":5311},"indent":[1]}},{"type":"code","lang":"cpp","meta":null,"value":"// 1624618650000000000\n// Please, do not change the line above\n\n#ifdef\nKLEE_MODE\nextern void klee_make_symbolic(void *addr, unsigned long long nbytes, const char *name);\n#endif\n#include\n\"dependent_functions_stub.h\"\n\n#define\nNULL ((void*)0)\n\nint double_max_symbolic;\nint double_max(int a, int b) {\nreturn a;\n}","position":{"start":{"line":181,"column":1,"offset":5313},"end":{"line":199,"column":4,"offset":5632},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In such a case, UTBot will generate tests for functions from other CMake modules implying\nthat ","position":{"start":{"line":201,"column":1,"offset":5634},"end":{"line":202,"column":6,"offset":5729},"indent":[1]}},{"type":"inlineCode","value":"double_max(int a, int b) = a","position":{"start":{"line":202,"column":6,"offset":5729},"end":{"line":202,"column":36,"offset":5759},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":202,"column":36,"offset":5759},"end":{"line":202,"column":37,"offset":5760},"indent":[]}}],"position":{"start":{"line":201,"column":1,"offset":5634},"end":{"line":202,"column":37,"offset":5760},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"However, you can also use symbolic variable power when modifying stubs. Suppose that you want your function not to\nreturn any value, but perform some checks on the arguments prior to that. Also, there may be a special case in that\nfunction that is highly important to be reflected in the stub. In that case, you can insert those checks in the stub,\nand, if they succeed, return a symbolic value:","position":{"start":{"line":204,"column":1,"offset":5762},"end":{"line":207,"column":47,"offset":6157},"indent":[1,1,1]}}],"position":{"start":{"line":204,"column":1,"offset":5762},"end":{"line":207,"column":47,"offset":6157},"indent":[1,1,1]}},{"type":"code","lang":"cpp","meta":null,"value":"// 1624618650000000000\n// Please, do not change the line above\n\n#ifdef\nKLEE_MODE\nextern void klee_make_symbolic(void *addr, unsigned long long nbytes, const char *name);\n#endif\n#include\n\"dependent_functions_stub.h\"\n\n#define\nNULL ((void*)0)\n\nint double_max_symbolic;\nint double_max(int a, int b) {\nif (a == 100 && a > b) {\nreturn 100;\n}\nstatic int firstTimeCall = 1;\n#ifdef\nKLEE_MODE\nif (firstTimeCall == 1) {\nfirstTimeCall = 0;\nklee_make_symbolic(&double_max_symbolic, sizeof(double_max_symbolic), \"double_max_symbolic\");\n}\n#endif\nreturn double_max_symbolic;\n}","position":{"start":{"line":209,"column":1,"offset":6159},"end":{"line":238,"column":4,"offset":6730},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"By this change, ","position":{"start":{"line":240,"column":1,"offset":6732},"end":{"line":240,"column":17,"offset":6748},"indent":[]}},{"type":"inlineCode","value":"double_max(a, b)","position":{"start":{"line":240,"column":17,"offset":6748},"end":{"line":240,"column":35,"offset":6766},"indent":[]}},{"type":"text","value":" will preserve its behaviour if a certain condition holds. This principle can be used\nto achieve the similarity of the stub and the original code while leaving out big parts of code.","position":{"start":{"line":240,"column":35,"offset":6766},"end":{"line":241,"column":97,"offset":6948},"indent":[1]}}],"position":{"start":{"line":240,"column":1,"offset":6732},"end":{"line":241,"column":97,"offset":6948},"indent":[1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":243,"column":1,"offset":6950},"end":{"line":243,"column":31,"offset":6980},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":243,"column":31,"offset":6980}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/utbot-site-staging/utbot-site-staging/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"stubs\"\n    }}>{`Stubs`}</h1>\n    <p>{`Here we describe how stubs are generated and what they are needed for.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`üìù`}<strong parentName=\"p\">{`Note`}</strong></p>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Stub`}</strong>{` is a function which emulates behavior of another function it is written for.\nIt's often useful to write stubs for functions from another module that you don't want to test.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"when-stubs-are-used\"\n    }}>{`When stubs are used`}</h3>\n    <p>{`UTBot generates stubs for every function in the project first time you open it and synchronize each time before test\ngeneration.`}</p>\n    <p>{`First time you open the project you will see `}<inlineCode parentName=\"p\">{`UTBot is generating stubs for project...`}</inlineCode>{` message. It means that for each\nfile in your project UTBot generates file which contains all non-static functions signatures from the source file. Stubs\ncan be used as substitutes for calling functions from another module. Consider the following project structure:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`executable\n|---- lib1.a\n|     |---- A.c\n|     +---- B.c\n|---- lib2.a\n|     |---- C.c\n`}</code></pre>\n    <p>{`If we run test generation for `}<inlineCode parentName=\"p\">{`C.c`}</inlineCode>{`, all functions from `}<inlineCode parentName=\"p\">{`lib1.a`}</inlineCode>{` will be replaced with their stubs on build step. So, if\nthe function `}<inlineCode parentName=\"p\">{`foo`}</inlineCode>{` from `}<inlineCode parentName=\"p\">{`C.c`}</inlineCode>{` calls the function `}<inlineCode parentName=\"p\">{`bar`}</inlineCode>{` from `}<inlineCode parentName=\"p\">{`A.c`}</inlineCode>{`, then stub for the function `}<inlineCode parentName=\"p\">{`bar`}</inlineCode>{` will be invoked\ninstead. Note that you can still generate tests using the exact definition of `}<inlineCode parentName=\"p\">{`bar`}</inlineCode>{`; for that, you will need to\nunmark `}<inlineCode parentName=\"p\">{`Use Stubs`}</inlineCode>{` checkbox in `}<a parentName=\"p\" {...{\n        \"href\": \"vscode-extension-settings#use-stubs\"\n      }}>{`settings`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"stub-file-example\"\n    }}>{`Stub file example`}</h3>\n    <p>{`Stub files can be found in `}<inlineCode parentName=\"p\">{`tests/stubs`}</inlineCode>{` folder. This is an example of stub file generated\nfor `}<inlineCode parentName=\"p\">{`c-example/lib/dependent_functions.c`}</inlineCode>{` from\nthe `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example\"\n      }}>{`example project`}</a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`// 1624618650000000000\n// Please, do not change the line above\n\n#ifdef\nKLEE_MODE\nextern void klee_make_symbolic(void *addr, unsigned long long nbytes, const char *name);\n#endif\n#include\n\"dependent_functions_stub.h\"\n\n#define\nNULL ((void*)0)\n\nint double_max_symbolic;\nint double_max(int a, int b) {\nstatic int firstTimeCall = 1;\n#ifdef\nKLEE_MODE\nif (firstTimeCall == 1) {\nfirstTimeCall = 0;\nklee_make_symbolic(&double_max_symbolic, sizeof(double_max_symbolic), \"double_max_symbolic\");\n}\n#endif\nreturn double_max_symbolic;\n}\n\n`}</code></pre>\n    <p>{`The first line contains timestamp of stub file creation. It is required for synchronization with the source code, so,\nplease, do not modify this line:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`// 1619438023000000000\n`}</code></pre>\n    <p>{`Then, if a `}<inlineCode parentName=\"p\">{`KLEE_MODE`}</inlineCode>{` macro is passed during preprocessing, we add a KLEE declaration to allow us to use symbolic\nreturn value. `}<inlineCode parentName=\"p\">{`KLEE_MODE`}</inlineCode>{` serves for both test generation and test running purposes.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`#ifdef KLEE_MODE\nextern void klee_make_symbolic(void *addr, unsigned long long nbytes, const char *name);\n#endif\n`}</code></pre>\n    <p>{`This variable stores return value of the stub function:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`int double_max_symbolic;\n`}</code></pre>\n    <p>{`Stub function signature is always the same as the signature of the source function. If it's not (for example, if the\nfunction was modified), then UTBot will synchronize them by rewriting stub function with the new one:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`int double_max(int a, int b)\n`}</code></pre>\n    <p>{`If UTBot uses stubs, then `}<inlineCode parentName=\"p\">{`KLEE_MODE`}</inlineCode>{` is defined, and the return value is made symbolic. This way KLEE can decide what\nvalues to return to satisfy the execution paths:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`static int firstTimeCall = 1;\n#ifdef KLEE_MODE\n    if (firstTimeCall == 1) {\n        firstTimeCall = 0;\n        klee_make_symbolic(&double_max_symbolic, sizeof(double_max_symbolic), \"double_max_symbolic\");\n    }\n#endif\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"stub-headers\"\n    }}>{`Stub headers`}</h3>\n    <p>{`For each stub, a header is generated. It contains definitions of types and structures used in function headers, allowing\nstubs to be compilable. Stub headers may contain definitions fetched from system headers and may look obscure, but\nusually you will not modify them.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`üìù`}<strong parentName=\"p\">{`Note`}</strong></p>\n      <p parentName=\"blockquote\">{`You can change the stub function body however you want. UTBot saves custom code inside the function while synchronizing. However, if the source function signature changes, then stub function will be completely rewritten.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"tests-with-stubs\"\n    }}>{`Tests with stubs`}</h3>\n    <p>{`For the tests that use stubs, the return values are generated in a such way that the code coverage is maximized. For\nexample:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`extern \"C\" char pointerToPointer_symbolic;\n\nTEST(regression, calc_two_numbers_f_test_1)\n{\n    // Initialize symbolic stubs\n    pointerToPointer_symbolic = '\\\\x10';\n\n    // Construct input\n    char a = 'c';\n    char b = 'p';\n\n    // Expected output\n    int expected = 2;\n\n    // Trigger the function\n    int actual = calc_two_numbers_f(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, calc_two_numbers_f_test_2)\n{\n    // Initialize symbolic stubs\n    pointerToPointer_symbolic = 'b';\n\n    // Construct input\n    char a = 'c';\n    char b = 'b';\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = calc_two_numbers_f(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n`}</code></pre>\n    <p>{`Here `}<inlineCode parentName=\"p\">{`pointerToPointer_symbolic`}</inlineCode>{` stores return value for `}<inlineCode parentName=\"p\">{`pointerToPointer`}</inlineCode>{` stub function.`}</p>\n    <h3 {...{\n      \"id\": \"modifying-stubs\"\n    }}>{`Modifying stubs`}</h3>\n    <p>{`As it was noted, it is easy to rewrite UTBot stubs into anything you want them to be. You should modify only function\nbodies and not touch header include, or `}<inlineCode parentName=\"p\">{`KLEE_MODE`}</inlineCode>{` ifdefs. Consider the simplest example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`// 1624618650000000000\n// Please, do not change the line above\n\n#ifdef\nKLEE_MODE\nextern void klee_make_symbolic(void *addr, unsigned long long nbytes, const char *name);\n#endif\n#include\n\"dependent_functions_stub.h\"\n\n#define\nNULL ((void*)0)\n\nint double_max_symbolic;\nint double_max(int a, int b) {\nreturn a;\n}\n`}</code></pre>\n    <p>{`In such a case, UTBot will generate tests for functions from other CMake modules implying\nthat `}<inlineCode parentName=\"p\">{`double_max(int a, int b) = a`}</inlineCode>{`.`}</p>\n    <p>{`However, you can also use symbolic variable power when modifying stubs. Suppose that you want your function not to\nreturn any value, but perform some checks on the arguments prior to that. Also, there may be a special case in that\nfunction that is highly important to be reflected in the stub. In that case, you can insert those checks in the stub,\nand, if they succeed, return a symbolic value:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`// 1624618650000000000\n// Please, do not change the line above\n\n#ifdef\nKLEE_MODE\nextern void klee_make_symbolic(void *addr, unsigned long long nbytes, const char *name);\n#endif\n#include\n\"dependent_functions_stub.h\"\n\n#define\nNULL ((void*)0)\n\nint double_max_symbolic;\nint double_max(int a, int b) {\nif (a == 100 && a > b) {\nreturn 100;\n}\nstatic int firstTimeCall = 1;\n#ifdef\nKLEE_MODE\nif (firstTimeCall == 1) {\nfirstTimeCall = 0;\nklee_make_symbolic(&double_max_symbolic, sizeof(double_max_symbolic), \"double_max_symbolic\");\n}\n#endif\nreturn double_max_symbolic;\n}\n`}</code></pre>\n    <p>{`By this change, `}<inlineCode parentName=\"p\">{`double_max(a, b)`}</inlineCode>{` will preserve its behaviour if a certain condition holds. This principle can be used\nto achieve the similarity of the stub and the original code while leaving out big parts of code.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;"}}